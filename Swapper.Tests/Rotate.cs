using FluentAssertions;
using Xunit;

namespace Swapper.Tests;

public class RotateTests
{
    [Fact]
    public void Test1()
    {
        /*
            1234
            3412
            2341
            4123
            
         *  4231
            1342
            2413
            3124
            
        // 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15
        // 1  2  3  4  3  4  1  2  2  3  4  1  4  1  2  3
        // 4  2  3  1  1  3  4  2  2  4  1  3  3  1  2  4
        
        /*
         * 0 0   1 = 0 ->  3    4*0+3
         * 0 1   2 = 1 ->  7    4*1+3
         * 0 2   3 = 2 -> 11    4*2+3
         * 0 3   4 = 3 -> 15    4*3+3
         *  
         * 1 0   3 = 4 ->  2    4*0+2
         * 1 1   4 = 5 ->  6    4*1+2
         * 1 2   1 = 6 -> 10    4*2+2
         * 1 3   2 = 7 -> 14    4*3+2
         *  
         * 2 0   2 =  8 ->  1   4*0+1
         * 2 1   3 =  9 ->  5   4*1+1
         * 2 2   4 = 10 ->  9   4*2+1
         * 2 3   1 = 11 -> 13   4*3+1
         *   
         * 3 0   4 = 12 ->  0   4*0+0
         * 3 1   1 = 13 ->  4   4*1+0
         * 3 2   2 = 14 ->  8   4*2+0
         * 3 3   3 = 15 -> 12   4*3+0
         * 
         */
        Grid input =
            "1234" +
            "3412" +
            "2341" +
            "4123";

        Grid expected = 
            "4231" +
            "1342" +
            "2413" +
            "3124";
        
        Rotate.Clockwise(input).Should().Be(expected);
    }
    
    [Fact]
    public void Larger()
    {
        Grid input =
            "111111111" +
            "222222222" +
            "333333333" +
            "333333333" +
            "333333333" +
            "333333333" +
            "333333333" +
            "333333333" +
            "444444444";

        Grid expected = 
            "433333321" +
            "433333321" +
            "433333321" +
            "433333321" +
            "433333321" +
            "433333321" +
            "433333321" +
            "433333321" +
            "433333321";

        Rotate.Clockwise(input).Should().Be(expected);
    }
}